npx nodemon .\index.js
npm run dev

<template>
  <div :class="['app-container', darkMode ? 'dark-mode' : 'light-mode']">
    <!-- ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î -->
    <div class="header">
      <h1>üìÉ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h1>
      <button class="toggle-btn" @click="toggleDarkMode">
        {{ darkMode ? "üåû Light Mode" : "üåô Dark Mode" }}
      </button>
    </div>

    <!-- ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö -->
    <div class="filter-container">
      <input v-model="searchQuery" type="text" placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." class="input-field">
      <select v-model="selectedGender" class="dropdown">
        <option value="">‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏®</option>
        <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
        <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
        <option value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ">‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</option>
      </select>
      <select v-model="sortKey" class="dropdown">
        <option value="">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö</option>
        <option value="firstname">‡∏ä‡∏∑‡πà‡∏≠ (A-Z)</option>
        <option value="lastname">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (A-Z)</option>
        <option value="age">‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ô‡πâ‡∏≠‡∏¢ ‚Üí ‡∏°‡∏≤‡∏Å)</option>
      </select>
      <button class="add-btn" @click="showAddUserModal = true">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</button>
    </div>

    <!-- ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
    <div class="user-list">
      <div v-for="user in sortedAndFilteredUsers" :key="user.id" class="user-card">
        <div class="user-info">
          <h3>{{ user.firstname }} {{ user.lastname }}</h3>
          <p>‡∏≠‡∏≤‡∏¢‡∏∏: {{ user.age }} | ‡πÄ‡∏û‡∏®: {{ user.gender }}</p>
          <p class="interests">üí° {{ user.interests }}</p>
          <p class="desc">{{ user.description }}</p>
        </div>
        <div class="actions">
          <button class="edit-btn" @click="editUser(user)">üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
          <button class="delete-btn" @click="deleteUser(user.id)">üóë ‡∏•‡∏ö</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      users: [],
      searchQuery: "",
      selectedGender: "",
      sortKey: "",
      sortDirection: "asc",
      darkMode: false
    };
  },
  computed: {
    sortedAndFilteredUsers() {
      let filtered = this.users;

      // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®
      if (this.selectedGender) {
        filtered = filtered.filter(user => user.gender === this.selectedGender);
      }

      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• / ‡∏≠‡∏≤‡∏¢‡∏∏
      if (this.searchQuery) {
        filtered = filtered.filter(user =>
          user.firstname.includes(this.searchQuery) ||
          user.lastname.includes(this.searchQuery) ||
          user.age.toString().includes(this.searchQuery)
        );
      }

      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      if (this.sortKey) {
        filtered = [...filtered].sort((a, b) => {
          let result = 0;
          if (a[this.sortKey] < b[this.sortKey]) result = -1;
          if (a[this.sortKey] > b[this.sortKey]) result = 1;
          return this.sortDirection === "asc" ? result : -result;
        });
      }

      return filtered;
    }
  },
  mounted() {
    this.fetchUsers();
  },
  methods: {
    async fetchUsers() {
      try {
        const response = await axios.get("http://localhost:8000/users");
        this.users = response.data;
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    },
    toggleDarkMode() {
      this.darkMode = !this.darkMode;
    }
  }
};
</script>

<style>
/* ‚úÖ ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ */
.light-mode {
  background-color: #f5f5f5;
  color: #333;
}
.dark-mode {
  background-color: #121212;
  color: #ffffff;
}

/* ‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å */
.app-container {
  max-width: 900px;
  margin: auto;
  padding: 20px;
}

/* ‚úÖ Header */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î */
.toggle-btn {
  background: #444;
  color: white;
  padding: 8px 15px;
  border: none;
  border-radius: 5px;
  transition: 0.3s;
}
.toggle-btn:hover {
  background: #f8d210;
  color: #000;
}

/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á */
.filter-container {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}
.input-field,
.dropdown {
  flex: 1;
  padding: 8px;
  border-radius: 5px;
  border: 1px solid #ccc;
}
.add-btn {
  background: #0d6efd;
  color: white;
  padding: 8px 15px;
  border: none;
  border-radius: 5px;
  transition: 0.3s;
}
.add-btn:hover {
  background: #0056b3;
}

/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Card View) */
.user-list {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}
.user-card {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  padding: 15px;
  border-radius: 10px;
  flex: 1 1 300px;
  transition: 0.3s;
}
.user-card:hover {
  transform: translateY(-5px);
  box-shadow: 0px 0px 15px rgba(255, 255, 255, 0.2);
}
.user-info h3 {
  margin: 0;
}
.interests {
  font-style: italic;
  color: #f8d210;
}
.desc {
  font-size: 14px;
  opacity: 0.8;
}

/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç & ‡∏•‡∏ö */
.actions {
  display: flex;
  justify-content: space-between;
  margin-top: 10px;
}
.edit-btn {
  background: #ffc107;
  color: #000;
  padding: 5px 10px;
  border-radius: 5px;
  transition: 0.3s;
}
.edit-btn:hover {
  background: #ffca2c;
}
.delete-btn {
  background: #dc3545;
  color: #fff;
  padding: 5px 10px;
  border-radius: 5px;
  transition: 0.3s;
}
.delete-btn:hover {
  background: #ff4d4d;
}
</style>

import axios from "axios";
<template>
  <div class="container mt-5">
    <h2 class="fw-bold">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>

    <!-- ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ -->
    <div class="d-flex justify-content-between my-3">
      <input v-model="searchQuery" type="text" class="form-control w-25" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...">
      <button class="btn btn-primary" @click="showAddUserModal = true">
        ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      </button>
    </div>

    <!-- ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
    <div class="table-responsive">
      <table class="table table-bordered text-center">
        <thead class="table-light">
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
            <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
            <th>‡πÄ‡∏û‡∏®</th>
            <th>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à</th>
            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(user, index) in filteredUsers" :key="user.id">
            <td>{{ user.firstname }}</td>
            <td>{{ user.lastname }}</td>
            <td>{{ user.age }}</td>
            <td>{{ user.gender }}</td>
            <td>{{ user.interests }}</td>
            <td>{{ user.description }}</td>
            <td>
              <button class="btn btn-warning btn-sm me-2" @click="editUser(user)">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
              <button class="btn btn-danger btn-sm" @click="deleteUser(user.id)">‡∏•‡∏ö</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- ‚úÖ ‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
    <div v-if="showAddUserModal" class="modal d-block" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">{{ editingUser ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" }}</h5>
            <button type="button" class="btn-close" @click="closeModal"></button>
          </div>
          <div class="modal-body">
            <input v-model="newUser.firstname" type="text" class="form-control mb-2" placeholder="‡∏ä‡∏∑‡πà‡∏≠">
            <input v-model="newUser.lastname" type="text" class="form-control mb-2" placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
            <input v-model="newUser.age" type="number" class="form-control mb-2" placeholder="‡∏≠‡∏≤‡∏¢‡∏∏">
            <select v-model="newUser.gender" class="form-control mb-2">
              <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
              <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
              <option value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ">‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</option>
            </select>
            <input v-model="newUser.interests" type="text" class="form-control mb-2" placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à">
            <textarea v-model="newUser.description" class="form-control mb-2" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"></textarea>
          </div>
          <div class="modal-footer">
            <button class="btn btn-secondary" @click="closeModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            <button class="btn btn-success" @click="editingUser ? updateUser() : addUser()">
              {{ editingUser ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡πÄ‡∏û‡∏¥‡πà‡∏°" }}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      users: [],
      searchQuery: "",
      showAddUserModal: false,
      editingUser: null,
      newUser: { firstname: "", lastname: "", age: "", gender: "‡∏´‡∏ç‡∏¥‡∏á", interests: "", description: "" },
    };
  },
  computed: {
    filteredUsers() {
      return this.users.filter(user => 
        user.firstname.includes(this.searchQuery) || 
        user.lastname.includes(this.searchQuery) ||
        user.age.toString().includes(this.searchQuery) ||
        user.gender.includes(this.searchQuery)
      );
    }
  },
  mounted() {
    this.fetchUsers();
  },
  methods: {
    async fetchUsers() {
      try {
        const response = await axios.get("http://localhost:8000/users");
        this.users = response.data;
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    },
    async addUser() {
      if (!this.newUser.firstname || !this.newUser.lastname || !this.newUser.age) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
        return;
      }
      try {
        await axios.post("http://localhost:8000/users", this.newUser);
        this.fetchUsers();
        this.closeModal();
      } catch (error) {
        console.error("Error adding user:", error);
      }
    },
    async deleteUser(id) {
      if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
        try {
          await axios.delete(`http://localhost:8000/users/${id}`);
          this.fetchUsers();
        } catch (error) {
          console.error("Error deleting user:", error);
        }
      }
    },
    editUser(user) {
      this.newUser = { ...user };
      this.editingUser = user.id;
      this.showAddUserModal = true;
    },
    async updateUser() {
      try {
        await axios.put(`http://localhost:8000/users/${this.editingUser}`, this.newUser);
        this.fetchUsers();
        this.closeModal();
      } catch (error) {
        console.error("Error updating user:", error);
      }
    },
    closeModal() {
      this.showAddUserModal = false;
      this.newUser = { firstname: "", lastname: "", age: "", gender: "‡∏´‡∏ç‡∏¥‡∏á", interests: "", description: "" };
      this.editingUser = null;
    }
  }
};
</script>

<style>
.modal {
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}
.modal-dialog {
  max-width: 500px;
}
</style>








<template>
  <div class="container mt-5">
    <h2 class="fw-bold">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>

    <!-- ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö -->
    <div class="d-flex justify-content-between my-3">
      <input v-model="searchQuery" type="text" class="form-control w-25" placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...">
      
      <!-- ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏® -->
      <select v-model="selectedGender" class="form-control w-25">
        <option value="">-- ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏® --</option>
        <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
        <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
        <option value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ">‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</option>
      </select>

      <!-- ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö -->
      <select v-model="sortKey" class="form-control w-25">
        <option value="">-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö --</option>
        <option value="firstname">‡∏ä‡∏∑‡πà‡∏≠ (A-Z)</option>
        <option value="lastname">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (A-Z)</option>
        <option value="age">‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ô‡πâ‡∏≠‡∏¢ ‚Üí ‡∏°‡∏≤‡∏Å)</option>
      </select>
      
      <button class="btn btn-primary" @click="openAddUserModal">
        ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      </button>
    </div>

    <!-- ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
    <div class="table-responsive">
      <table class="table table-bordered text-center">
        <thead class="table-light">
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
            <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
            <th>‡πÄ‡∏û‡∏®</th>
            <th>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à</th>
            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(user, index) in sortedAndFilteredUsers" :key="user.id">
            <td>{{ user.firstname }}</td>
            <td>{{ user.lastname }}</td>
            <td>{{ user.age }}</td>
            <td>{{ user.gender }}</td>
            <td>{{ user.interests }}</td>
            <td>{{ user.description }}</td>
            <td>
              <button class="btn btn-warning btn-sm me-2" @click="editUser(user)">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
              <button class="btn btn-danger btn-sm" @click="deleteUser(user.id)">‡∏•‡∏ö</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- ‚úÖ ‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
    <div v-if="showAddUserModal" class="modal d-block" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">{{ editingUser ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" }}</h5>
            <button type="button" class="btn-close" @click="closeModal"></button>
          </div>
          <div class="modal-body">
            <input v-model="newUser.firstname" type="text" class="form-control mb-2" placeholder="‡∏ä‡∏∑‡πà‡∏≠">
            <input v-model="newUser.lastname" type="text" class="form-control mb-2" placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
            <input v-model="newUser.age" type="number" class="form-control mb-2" placeholder="‡∏≠‡∏≤‡∏¢‡∏∏">
            <select v-model="newUser.gender" class="form-control mb-2">
              <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
              <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
              <option value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ">‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</option>
            </select>
            <input v-model="newUser.interests" type="text" class="form-control mb-2" placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à">
            <textarea v-model="newUser.description" class="form-control mb-2" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"></textarea>
          </div>
          <div class="modal-footer">
            <button class="btn btn-secondary" @click="closeModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            <button class="btn btn-success" @click="editingUser ? updateUser() : addUser()">
              {{ editingUser ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡πÄ‡∏û‡∏¥‡πà‡∏°" }}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      users: [],
      searchQuery: "",
      selectedGender: "",
      sortKey: "",
      sortDirection: "asc",
      showAddUserModal: false,
      editingUser: null,
      newUser: { firstname: "", lastname: "", age: "", gender: "‡∏´‡∏ç‡∏¥‡∏á", interests: "", description: "" },
    };
  },
  computed: {
    sortedAndFilteredUsers() {
      let filtered = this.users;

      // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®
      if (this.selectedGender) {
        filtered = filtered.filter(user => user.gender === this.selectedGender);
      }

      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• / ‡∏≠‡∏≤‡∏¢‡∏∏
      if (this.searchQuery) {
        filtered = filtered.filter(user =>
          user.firstname.includes(this.searchQuery) ||
          user.lastname.includes(this.searchQuery) ||
          user.age.toString().includes(this.searchQuery)
        );
      }

      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      if (this.sortKey) {
        filtered = [...filtered].sort((a, b) => {
          let result = 0;
          if (a[this.sortKey] < b[this.sortKey]) result = -1;
          if (a[this.sortKey] > b[this.sortKey]) result = 1;
          return this.sortDirection === "asc" ? result : -result;
        });
      }

      return filtered;
    }
  },
  mounted() {
    this.fetchUsers();
  },
  methods: {
    async fetchUsers() {
      try {
        const response = await axios.get("http://localhost:8000/users");
        this.users = response.data;
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    },
    openAddUserModal() {
      this.newUser = { firstname: "", lastname: "", age: "", gender: "‡∏´‡∏ç‡∏¥‡∏á", interests: "", description: "" };
      this.editingUser = null;
      this.showAddUserModal = true;
    },
    async addUser() {
      try {
        await axios.post("http://localhost:8000/users", this.newUser);
        this.fetchUsers();
        this.closeModal();
      } catch (error) {
        console.error("Error adding user:", error);
      }
    },
    async deleteUser(id) {
      if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
        try {
          await axios.delete(`http://localhost:8000/users/${id}`);
          this.fetchUsers();
        } catch (error) {
          console.error("Error deleting user:", error);
        }
      }
    },
    editUser(user) {
      this.newUser = { ...user };
      this.editingUser = user.id;
      this.showAddUserModal = true;
    },
    async updateUser() {
      try {
        await axios.put(`http://localhost:8000/users/${this.editingUser}`, this.newUser);
        this.fetchUsers();
        this.closeModal();
      } catch (error) {
        console.error("Error updating user:", error);
      }
    },
    closeModal() {
      this.showAddUserModal = false;
      this.newUser = { firstname: "", lastname: "", age: "", gender: "‡∏´‡∏ç‡∏¥‡∏á", interests: "", description: "" };
      this.editingUser = null;
    }
  }
};
</script>
